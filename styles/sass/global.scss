@use "sass:color";
@use "sass:map" as *;
@use "sass:math";

@use "cores";
@use "utils/lista_utils.scss" as lista_utils;

@use "../../vendor/bulma/bulma.sass" as * with (

  $purple: cores.$roxo,
  $text: cores.$texto-claro,
  $text-strong: color.scale(cores.$texto-claro, $lightness: 50%), // ? Ainda não sei como fica
  $text-light: color.scale(cores.$texto-claro, $lightness: -50%),
  $link: cores.$roxo,
  $code: cores.$roxo-claro,
  $background: cores.$rose-pine-bg,
  $scheme-main: cores.$rose-pine-moon-bg,
  $code-background: cores.$rose-pine-moon-bg,
  // Só testado com tables. $table-cell-border usa essa cor
  $border: color.scale(cores.$rose-pine-moon-bg, $lightness: 10%)
);





//
// Configurações do estilo
//
$conteudo-blocos-largos-desktop: false;
$conteudo-blocos-largos-mobile: true;





$bloco-border-radius: 15px;
$table-border-radius: $bloco-border-radius;
$code-block-border-radius: $bloco-border-radius;
$code-border-radius: math.div($code-block-border-radius, 3);

$conteudo-padding-horizontal: 16px;
$sidebar: (
  "width": (
    "desktop": 256px,
    "mobile": 100%
  ),
  "bg": cores.$rose-pine-moon-bg,
  "shadow-radius": $conteudo-padding-horizontal * 0.75
);
$conteudo: (
  "padding": (
    "desktop": (
      "top": 2em,
      "right": $conteudo-padding-horizontal,
      "bottom": 0,
      // Como a barra lateral tem posição absoluta, aqui nos distanciamos dela
      "left": get($sidebar, "width", "desktop") + $conteudo-padding-horizontal
    ),
    "mobile": (
      "top": 2em,
      "right": $conteudo-padding-horizontal,
      "bottom": 0,
      "left": $conteudo-padding-horizontal
    )
  )
);





// Produz as mesmas sombras que o .box do Bulma
@mixin bulma-box-shadow {
  box-shadow: $box-shadow; // https://bulma.io/documentation/elements/box/#variables
}





h1, h2, h3, h4, h5, h6 {
  @extend .title;
}

body {
  // Conserta um overflow inferior no Firefox
  min-height: 100%;
  min-width: 100%;
  overflow: hidden;
  background-color: $background;
}

.sidebar {
  @extend .menu;
  padding: 1em 0;
  position: fixed;
  width: get($sidebar, "width", "desktop");
  height: 100%;
  // Scrollbar deve ocultar automaticamente assim
  overflow-y: auto;

  background-color: get($sidebar, "bg");
  box-shadow: 0 0 get($sidebar, "shadow-radius") cores.$sombra-suave;

  // Exibir o atributo data-title acima da lista, como seu título
  .menu-list::before {
    @extend .menu-label;
    text-align: center;
    display: block;
    content: attr(data-titulo);
    margin-bottom: 1em;
  }

  .categoria {
    border-radius: 5px;
    border: 1px solid $purple;

    i {
      // Duração "fast" das animações do jQuery
      transition: transform 200ms ease-in-out;
    }

    &.is-active {
      &:hover {
        box-shadow: 0px 0px 10px $purple;
      }
      box-shadow: 0px 0px 5px $purple;
    }
  }
}

#conteudo {
  max-height: 100%;

  @extend .content;
  padding: lista_utils.com-espaços(values(get($conteudo, "padding", "desktop")));

  > ol, > ul {
    margin-left: 0;
    > li {
      @extend .box;
      display: list-item;
      list-style-position: inside;
      border-radius: $bloco-border-radius;
      background-color: $scheme-main;

      p {
        display: inline;
      }
    }
  }

  table {
    @extend .table;
    @include bulma-box-shadow;
    border-radius: $table-border-radius;
  }

  code {
    border-radius: $code-border-radius;
  }

  pre {
    padding-left: 0;
    padding-right: 0;

    // Não cortar a sombra do code
    overflow: visible;

    code {
      @include bulma-box-shadow;
      border-radius: $code-block-border-radius;
    }
  }
}

@media screen {
  // Mobile (qualquer tela no modo retrato ou de largura pequena)
  @media (max-aspect-ratio: 1/1), screen and (max-width: 512px) {
    .sidebar {
      width: get($sidebar, "width", "mobile");
    }

    #conteudo {
      padding: lista_utils.com-espaços(values(get($conteudo, "padding", "mobile")));
    }

    @if not $conteudo-blocos-largos-mobile {
      #conteudo code {
        max-width: min-content;
      }

      #conteudo table {
        // min-content pode deixar colunas largas com linhas demais
        width: auto;
      }
    }
  }

  // TODO: Deixar menos doentio, parece o fast inverse square root do quake.
  //       Se existisse else pra media query tava resolvido. Isso é quase o else
  //       da media query acima.
  // Desktop (oposto de Mobile)
  @media not all and (max-aspect-ratio: 1/1) {
    @media not all and (max-width: 512px) {
      @if not $conteudo-blocos-largos-desktop {
        #conteudo code {
          max-width: min-content;
        }

        #conteudo table {
          // min-content pode deixar colunas largas com linhas demais
          width: auto;
        }
      }
    }
  }
}